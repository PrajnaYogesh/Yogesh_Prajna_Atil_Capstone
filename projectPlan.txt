This file contains the steps taken to execute the project

1) Plan:
a) Frontend features

The front end will have follwong tabs
Navaigation bar : on all pages
Footer : on all pages (this will contain logo and social media on keft, in middle addrss and phone and on right the hours). Add a copyright at the bottom
On navigation bar we have below options:
Home (can combine About us here) : home will have an main image with carrousal of foods and welcome message and little intro about Atil. with more images on bottom (4 sections), food  Experience section followed by footer
Menu : tabs on top for different categories and on click on category shows list of items with add to cart button
Catering: services we offer and an form for enquiry 
About us : Fine Dining explanation. Can combine this in Home page itself
Contact : add location on left and form on the right. add map at the bottom
Dine in : this should show the  form or options to select timing and reserve a spot or can reserve through phone
Cart : add all the items that were selected here -> clicking this hould open checkout option(check stripe for this)
phone number :this should be large and easy to find


Admin page:
 
 signup and login page for Admin -> when user logs in should take to the same website,but also an tab to add new items
all recipes should also show an  edit button.(this should be visible only to the admin). when you click on edit,it should open a pop up with all the details. you can edit and save it. on save it should be updated everywhere

use jwt,bcrypt here,tokens also



=======================================================

b) Backend features

user table (here admin details stored)

menu table with category and item details

order table


step:
1 )installed all dependencies
npm init -y  (install node)

npm install express cors dotenv mongoose nodemon

2) create .env file and .gitignore file.. add .env and node_modules to .gitignore

2) add index.js 
write the base code, add port and see if the server is up and running

3) add config folder, add the mongo db url with the database name at the end .  
create connectToDB file and do connection to mongo db. initiate the connectToDB in index.js
also add dotenv.config in index.js. 

4) created folders for controllers ,models,routers

5)in models => created schema . This Schema will not reflect in atlas mongodb unless an CRUD method is done.

6)installed bcrypt

7) In admin controller => created the login,sign up in controller. used bcrypt  hash and compare to encrypt ,decrypt the password
completed the coding part for signup and login, testing them using postman and it works

8) lets now set up cloudinary and work on the menu controller

Cloudinary :
first store the 3 values in .env
CLOUDINARY_CLOUD_NAME
CLOUDINARY_API_KEY
CLOUDINARY_API_SECRET

now import these in index.js and also add the cloudinary configuration
You are now good to store images in cloudinary using the controllers

9) create controller for the menu
import cloudinary and the menu model and create the required crud methods here. use cloudinary wherever required here to store images to cloudinary




